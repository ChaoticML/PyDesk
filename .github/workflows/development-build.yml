# Naam van de workflow die wordt getoond in het "Actions"-tabblad
name: Development Build

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest

    steps:
      # ... (Stap 1, 2, 3 blijven hetzelfde) ...
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Stap 4: Genereer en pas het PyInstaller .spec-bestand aan, en bouw de .exe
      - name: Configure and Build Executable
    run: |
      # Genereer het basis .spec-bestand met --console
      # Dit creÃ«ert een console window, wat debugging makkelijker maakt.
      # We verwijderen --windowed hier.
      pyi-makespec --name PyDesk --onefile --console run.py

      # Lees het gegenereerde .spec-bestand
      $specContent = Get-Content PyDesk.spec

      # Zoek de 'a = Analysis(...)' sectie en voeg onze aanpassingen toe
      $newDatas = @(
          "('app/templates', 'app/templates')",
          "('app/static', 'app/static')",
          "('app/database.py', 'app')",
          "('site-packages/matplotlib', 'site-packages/matplotlib')"
      )
      $newHiddenImports = @(
          "'waitress'",
          "'markdown'",
          "'matplotlib'"
      )
      $newExcludes = @(
          "'flask_session'"
      )

      # Invoegen in de 'datas' lijst
      $specContent = $specContent -replace "`n    datas=\[],", "`n    datas=@($($newDatas -join ",")),"
      # Invoegen in de 'hiddenimports' lijst
      $specContent = $specContent -replace "`n    hiddenimports=\[],", "`n    hiddenimports=@($($newHiddenImports -join ",")),"
      # Invoegen in de 'excludes' lijst
      $specContent = $specContent -replace "`n    excludes=\[],", "`n    excludes=@($($newExcludes -join ",")),"

      # Werk 'pathex' bij om relatief te zijn (of verwijder als overbodig)
      $specContent = $specContent -replace "`n    pathex=\[.*?\],", "`n    pathex=[],"

      # Zorg ervoor dat console=True blijft (niet overschrijven naar False)
      # De pyi-makespec --console optie zet dit al goed, dus geen verdere wijziging nodig hier.
      
      # Schrijf het gewijzigde .spec-bestand terug
      Set-Content -Path PyDesk.spec -Value $specContent

      # Bouw de .exe met het aangepaste .spec-bestand
      pyinstaller PyDesk.spec

      # Stap 5: Upload de gebouwde .exe als een artefact
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: PyDesk-dev
          path: dist/PyDesk.exe
